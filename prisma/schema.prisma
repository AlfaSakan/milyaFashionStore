// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  createdAt Int
  updatedAt Int

  email String @unique @db.VarChar(50)
  name  String @db.VarChar(50)
  hash  String
  level String @default("user") @db.VarChar(10)

  imageId String? @unique
  image   Image?  @relation(fields: [imageId], references: [id])

  Session Session[]

  @@map("users")
}

model Session {
  id        String @id @default(cuid())
  createdAt Int
  updatedAt Int

  userAgent String
  hashToken String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  Product Product[]

  @@map("genders")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  Product Product[]
  Size    Size[]

  @@map("categories")
}

model Stock {
  id     String @id @default(cuid())
  amount Int    @default(0)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  sizeId Int
  size   Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@map("stocks")
}

model Size {
  id   Int    @id @default(autoincrement())
  size String @db.VarChar(50)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  Stock Stock[]

  @@map("sizes")
}

model Product {
  id        String @id @default(cuid())
  createdAt Int
  updatedAt Int

  name        String @db.VarChar(150)
  description String

  genderId   Int
  gender     Gender   @relation(fields: [genderId], references: [id], onDelete: Cascade)
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  Product_Tag Product_Tag[]
  Stock       Stock[]
  Image       Image[]

  @@map("products")
}

model Image {
  id     String @id @default(cuid())
  imgUrl String @unique
  title  String @db.VarChar(250)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  User User?

  @@map("images")
}

model Product_Tag {
  id Int @id @default(autoincrement())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("productTags")
}

model Tag {
  id   String @id @default(cuid())
  name String @db.VarChar(50)

  Product_Tag Product_Tag[]

  @@map("tags")
}
